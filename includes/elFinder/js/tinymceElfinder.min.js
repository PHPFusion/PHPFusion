window.tinymceElfinder=function(opts){ let elfNode=$('<div/>');if(opts.nodeId){elfNode.attr('id',opts.nodeId);delete opts.nodeId;} const uploadTargetHash=opts.uploadTargetHash||'L1_Lw';delete opts.uploadTargetHash; const getfm=open=>{ const cls=(tinymce.majorVersion<5)?'mce-container':'tox';return new Promise((resolve,reject)=>{ let elf; const done=()=>{if(open){ if(!Object.keys(elf.files()).length){ elf.one('open',()=>{elf.file(open)?resolve(elf):reject(elf,'errFolderNotFound');});}else{ new Promise((res,rej)=>{if(elf.file(open)){res();}else{ elf.request({cmd:'parents',target:open}).done(e=>{elf.file(open)?res():rej();}).fail(()=>{rej();});}}).then(()=>{if(elf.cwd().hash==open){resolve(elf);}else{ elf.exec('open',open).done(()=>{resolve(elf);}).fail(err=>{reject(elf,err?err:'errFolderNotFound');});}}).catch((err)=>{reject(elf,err?err:'errFolderNotFound');});}}else{ resolve(elf);}}; if(elf=elfNode.elfinder('instance')){ done();}else{ elf=elfNode.dialogelfinder(Object.assign({ title:'File Manager', startPathHash:open?open:void(0), useBrowserHistory:false, autoOpen:false, width:'90%', height:'90%', commandsOptions:{getfile:{oncomplete:'close'}},bootCallback:(fm)=>{ fm.getUI().css('z-index',parseInt($('body>.'+cls+':last').css('z-index'))+100);},getFileCallback:(files,fm)=>{}},opts)).elfinder('instance');done();}});};this.browser=function(callback,value,meta){getfm().then(fm=>{let cgf=fm.getCommand('getfile');const regist=()=>{fm.options.getFileCallback=cgf.callback=(file,fm)=>{var url,reg,info; url=fm.convAbsUrl(file.url); info=file.name+' ('+fm.formatSize(file.size)+')'; if(meta.filetype=='file'){callback(url,{text:info,title:info});} if(meta.filetype=='image'){callback(url,{alt:info});} if(meta.filetype=='media'){callback(url);}};fm.getUI().dialogelfinder('open');};if(cgf){ regist();}else{ fm.bind('init',()=>{cgf=fm.getCommand('getfile');regist();});}});return false;};this.uploadHandler=function(blobInfo,success,failure){new Promise(function(resolve,reject){getfm(uploadTargetHash).then(fm=>{let fmNode=fm.getUI(),file=blobInfo.blob(),clipdata=true;const err=(e)=>{var dlg=e.data.dialog||{};if(dlg.hasClass('elfinder-dialog-error')||dlg.hasClass('elfinder-confirm-upload')){fmNode.dialogelfinder('open');fm.unbind('dialogopened',err);}},closeDlg=()=>{if(!fm.getUI().find('.elfinder-dialog-error:visible,.elfinder-confirm-upload:visible').length){fmNode.dialogelfinder('close');}}; if(file.name){ clipdata=void(0);} fm.bind('dialogopened',err).exec('upload',{files:[file],target:uploadTargetHash,clipdata:clipdata, dropEvt:{altKey:true,ctrlKey:true}},void(0),uploadTargetHash).done(data=>{if(data.added&&data.added.length){fm.url(data.added[0].hash,{async:true}).done(function(url){ url+=(url.match(/\?/)?'&':'?')+'_t='+data.added[0].ts;resolve(fm.convAbsUrl(url));}).fail(function(){reject(fm.i18n('errFileNotFound'));});}else{reject(fm.i18n(data.error?data.error:'errUpload'));}}).fail(err=>{const error=fm.parseError(err);reject(fm.i18n(error?(error==='userabort'?'errAbort':error):'errUploadNoFiles'));}).always(()=>{fm.unbind('dialogopened',err);closeDlg();});}).catch((fm,err)=>{const error=fm.parseError(err);reject(fm.i18n(error?(error==='userabort'?'errAbort':error):'errUploadNoFiles'));});}).then((url)=>{success(url);}).catch((err)=>{failure(err);});};};