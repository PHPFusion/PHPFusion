(function(b){var a={series:{curvedLines:{active:false,apply:false,fit:false,curvePointFactor:20,fitPointDist:undefined}}};function c(f){f.hooks.processOptions.push(g);function g(i,h){if(h.series.curvedLines.active){i.hooks.processDatapoints.unshift(e)}}function e(r,q,s){var l=s.points.length/s.pointsize;var m=0.5;if(q.curvedLines.apply==true&&q.originSeries===undefined&&l>(1+m)){if(q.lines.fill){var u=d(s,q.curvedLines,1),t=d(s,q.curvedLines,2);s.pointsize=3;s.points=[];var o=0;var n=0;var p=0;var h=2;while(p<u.length||o<t.length){if(u[p]==t[o]){s.points[n]=u[p];s.points[n+1]=u[p+1];s.points[n+2]=t[o+1];o+=h;p+=h}else{if(u[p]<t[o]){s.points[n]=u[p];s.points[n+1]=u[p+1];s.points[n+2]=n>0?s.points[n-1]:null;p+=h}else{s.points[n]=t[o];s.points[n+1]=n>1?s.points[n-2]:null;s.points[n+2]=t[o+1];o+=h}}n+=3}}else{if(q.lines.lineWidth>0){s.points=d(s,q.curvedLines,1);s.pointsize=2}}}}function d(m,V,C){var L=m.points,F=m.pointsize;var t=V.curvePointFactor*(L.length/F);var l=new Array;var D=new Array;var v=-1;var u=-1;var J=0;if(V.fit){var x;if(typeof V.fitPointDist=="undefined"){var R=L[0];var Q=L[L.length-F];x=(Q-R)/(500*100)}else{x=V.fitPointDist}for(var M=0;M<L.length;M+=F){var O;var q;v=M;u=M+C;O=L[v]-x;q=L[v]+x;var A=2;while(O==L[v]||q==L[v]){O=L[v]-(x*A);q=L[v]+(x*A);A++}l[J]=O;D[J]=L[u];J++;l[J]=L[v];D[J]=L[u];J++;l[J]=q;D[J]=L[u];J++}}else{for(var M=0;M<L.length;M+=F){v=M;u=M+C;l[J]=L[v];D[J]=L[u];J++}}var E=l.length;var o=new Array();var T=new Array();o[0]=0;o[E-1]=0;T[0]=0;for(var M=1;M<E-1;++M){var P=(l[M+1]-l[M-1]);if(P==0){return[]}var y=(l[M]-l[M-1])/P;var B=y*o[M-1]+2;o[M]=(y-1)/B;T[M]=(D[M+1]-D[M])/(l[M+1]-l[M])-(D[M]-D[M-1])/(l[M]-l[M-1]);T[M]=(6*T[M]/(l[M+1]-l[M-1])-y*T[M-1])/B}for(var J=E-2;J>=0;--J){o[J]=o[J]*o[J+1]+T[J]}var r=(l[E-1]-l[0])/(t-1);var z=new Array;var I=new Array;var w=new Array;z[0]=l[0];I[0]=D[0];w.push(z[0]);w.push(I[0]);for(J=1;J<t;++J){z[J]=z[0]+J*r;var K=E-1;var G=0;while(K-G>1){var H=Math.round((K+G)/2);if(l[H]>z[J]){K=H}else{G=H}}var N=(l[K]-l[G]);if(N==0){return[]}var U=(l[K]-z[J])/N;var S=(z[J]-l[G])/N;I[J]=U*D[G]+S*D[K]+((U*U*U-U)*o[G]+(S*S*S-S)*o[K])*(N*N)/6;w.push(z[J]);w.push(I[J])}return w}}b.plot.plugins.push({init:c,options:a,name:"curvedLines",version:"0.5"})})(jQuery);