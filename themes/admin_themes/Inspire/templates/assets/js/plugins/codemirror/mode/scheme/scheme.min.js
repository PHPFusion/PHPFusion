(function(a){if(typeof exports=="object"&&typeof module=="object"){a(require("../../lib/codemirror"))}else{if(typeof define=="function"&&define.amd){define(["../../lib/codemirror"],a)}else{a(CodeMirror)}}})(function(a){a.defineMode("scheme",function(){var k="builtin",p="comment",h="string",e="atom",j="number",g="bracket";var n=2;function t(z){var x={},y=z.split(" ");for(var w=0;w<y.length;++w){x[y[w]]=true}return x}var f=t("Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");var o=t("define let letrec let* lambda");function d(w,x,y){this.indent=w;this.type=x;this.prev=y}function q(y,w,x){y.indentStack=new d(w,x,y.indentStack)}function l(w){w.indentStack=w.indentStack.prev}var c=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);var v=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);var r=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);var s=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);function b(w){return w.match(c)}function i(w){return w.match(v)}function u(x,w){if(w===true){x.backUp(1)}return x.match(s)}function m(w){return w.match(r)}return{startState:function(){return{indentStack:null,indentation:0,mode:false,sExprComment:false}},token:function(I,y){if(y.indentStack==null&&I.sol()){y.indentation=I.indentation()}if(I.eatSpace()){return null}var E=null;switch(y.mode){case"string":var C,x=false;while((C=I.next())!=null){if(C=='"'&&!x){y.mode=false;break}x=!x&&C=="\\"}E=h;break;case"comment":var C,F=false;while((C=I.next())!=null){if(C=="#"&&F){y.mode=false;break}F=(C=="|")}E=p;break;case"s-expr-comment":y.mode=false;if(I.peek()=="("||I.peek()=="["){y.sExprComment=0}else{I.eatWhile(/[^/s]/);E=p;break}default:var w=I.next();if(w=='"'){y.mode="string";E=h}else{if(w=="'"){E=e}else{if(w=="#"){if(I.eat("|")){y.mode="comment";E=p}else{if(I.eat(/[tf]/i)){E=e}else{if(I.eat(";")){y.mode="s-expr-comment";E=p}else{var A=null,B=false,H=true;if(I.eat(/[ei]/i)){B=true}else{I.backUp(1)}if(I.match(/^#b/i)){A=b}else{if(I.match(/^#o/i)){A=i}else{if(I.match(/^#x/i)){A=m}else{if(I.match(/^#d/i)){A=u}else{if(I.match(/^[-+0-9.]/,false)){H=false;A=u}else{if(!B){I.eat("#")}}}}}}if(A!=null){if(H&&!B){I.match(/^#[ei]/i)}if(A(I)){E=j}}}}}}else{if(/^[-+0-9.]/.test(w)&&u(I,true)){E=j}else{if(w==";"){I.skipToEnd();E=p}else{if(w=="("||w=="["){var G="";var D=I.column(),z;while((z=I.eat(/[^\s\(\[\;\)\]]/))!=null){G+=z}if(G.length>0&&o.propertyIsEnumerable(G)){q(y,D+n,w)}else{I.eatSpace();if(I.eol()||I.peek()==";"){q(y,D+1,w)}else{q(y,D+I.current().length,w)}}I.backUp(I.current().length-1);if(typeof y.sExprComment=="number"){y.sExprComment++}E=g}else{if(w==")"||w=="]"){E=g;if(y.indentStack!=null&&y.indentStack.type==(w==")"?"(":"[")){l(y);if(typeof y.sExprComment=="number"){if(--y.sExprComment==0){E=p;y.sExprComment=false}}}}else{I.eatWhile(/[\w\$_\-!$%&*+\.\/:<=>?@\^~]/);if(f&&f.propertyIsEnumerable(I.current())){E=k}else{E="variable"}}}}}}}}}return(typeof y.sExprComment=="number")?p:E},indent:function(w){if(w.indentStack==null){return w.indentation}return w.indentStack.indent},lineComment:";;"}});a.defineMIME("text/x-scheme","scheme")});